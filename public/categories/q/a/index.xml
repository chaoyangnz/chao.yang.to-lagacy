<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Q/A on Chao Yang</title>
    <link>/categories/q/a/</link>
    <description>Recent content in Q/A on Chao Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Apr 2015 19:02:25 +0000</lastBuildDate>
    
	<atom:link href="/categories/q/a/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>what&#39;s the difference between getName(), getSimpleName(), getCanonicalName() of Class?</title>
      <link>/post/whats-the-difference-between-getname-getsimplename-getcanonicalname-of-class/</link>
      <pubDate>Thu, 23 Apr 2015 19:02:25 +0000</pubDate>
      
      <guid>/post/whats-the-difference-between-getname-getsimplename-getcanonicalname-of-class/</guid>
      <description>//primitive System.out.println(int.class.getName()); System.out.println(int.class.getCanonicalName()); System.out.println(int.class.getSimpleName()); System.out.println(); //class System.out.println(String.class.getName()); System.out.println(String.class.getCanonicalName()); System.out.println(String.class.getSimpleName()); System.out.println(); //inner class System.out.println(HashMap.SimpleEntry.class.getName()); System.out.println(HashMap.SimpleEntry.class.getCanonicalName()); System.out.println(HashMap.SimpleEntry.class.getSimpleName()); System.out.println(); //anonymous inner class System.out.println(new Serializable(){}.getClass().getName()); System.out.println(new Serializable(){}.getClass().getCanonicalName()); System.out.println(new Serializable(){}.getClass().getSimpleNam()); Â Prints:
 int
int
int
java.lang.String
java.lang.String
String
java.util.AbstractMap$SimpleEntry
java.util.AbstractMap.SimpleEntry
SimpleEntry
ClassnameTest$1
null There&#39;s an empty line in the last block where getSimpleName returns an empty string.
 The upshot looking at this is:
the name is the name that you&#39;d use to dynamically load the class with, for example, a call to Class.</description>
    </item>
    
    <item>
      <title>What&#39;s the difference between getPath(), getAbsolutePath(), and getCanonicalPath()?</title>
      <link>/post/whats-the-difference-between-getpath-getabsolutepath-and-getcanonicalpath/</link>
      <pubDate>Thu, 23 Apr 2015 18:56:07 +0000</pubDate>
      
      <guid>/post/whats-the-difference-between-getpath-getabsolutepath-and-getcanonicalpath/</guid>
      <description>Consider these filenames:
 C:\temp\file.txt - This is a path, an absolute path, and a canonical path. .\file.txt - This is a path. It&#39;s neither an absolute path nor a canonical path. C:\temp\myapp\bin..\..\file.txt - This is a path and an absolute path. It&#39;s not a canonical path. A canonical path is always an absolute path.  Converting from a path to a canonical path makes it absolute (usually tack on the current working directory so e.</description>
    </item>
    
    <item>
      <title>what does 0.0.0.0 mean?</title>
      <link>/post/what-does-0-0-0-0-mean/</link>
      <pubDate>Wed, 22 Apr 2015 22:46:26 +0000</pubDate>
      
      <guid>/post/what-does-0-0-0-0-mean/</guid>
      <description>0.0.0.0, in server context, means &amp;ldquo;all IP addresses on the local machine&amp;rdquo; (in fact probably, &amp;ldquo;all IPv4 addresses on the local machine&amp;rdquo;). So, if your webserver machine has two ip addresses, 192.168.1.1 and 10.1.2.1, and you allow a webserver daemon like apache to listen on 0.0.0.0, it will be reachable at both of those IPs. But only to what can contact those IPs and the web port(s).
The only thing is that you cannot say &amp;ldquo;all addresses should have acces_s_&amp;rdquo; &amp;ndash; that&#39;s done in your firewall(s) and/or the server software and/or other security layers like tcpwrappers.</description>
    </item>
    
  </channel>
</rss>