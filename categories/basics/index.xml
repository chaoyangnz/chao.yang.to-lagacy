<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on Charvis Yang</title>
    <link>http://yangchao.me/categories/basics/</link>
    <description>Recent content in Basics on Charvis Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Sep 2015 22:20:18 +0000</lastBuildDate>
    
	<atom:link href="http://yangchao.me/categories/basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>statically loading vs. dynamically loading</title>
      <link>http://yangchao.me/post/statically-loading-vs-dynamically-loading/</link>
      <pubDate>Sat, 05 Sep 2015 22:20:18 +0000</pubDate>
      
      <guid>http://yangchao.me/post/statically-loading-vs-dynamically-loading/</guid>
      <description>statically loading when we need to use the class definition, like new operator, invoking static method, accessing static variables etc, the JVM will load the class statically.
But just declare variable of that type, class loading actually don&amp;rsquo;t happen.
class StaticallyLoading { public static void main(String[] args) { C c = null; System.out.println(&amp;quot;run here&amp;quot;); } }  After you compile this class successfully with class C definition, you run it as deleting the class C dependency at runtime.</description>
    </item>
    
    <item>
      <title>Java Serialization</title>
      <link>http://yangchao.me/post/java-serialization/</link>
      <pubDate>Sat, 27 Jun 2015 00:28:45 +0000</pubDate>
      
      <guid>http://yangchao.me/post/java-serialization/</guid>
      <description>Serialization What is Serialization? Serialization is the process to transfer a Java object into a sequence of bytes, often in the form of stream.
At another time, we can unserialize from the bytes and rebuild the object in JVM.
How to do  make the class to be serialized implement Serializable interface (Serializable is a marker interface) use ObjectOutputStream to serialize object use OjbectInputStream to unserialize the bytes In order to better control the serialization process, you can implement ObjectInput and ObjectOutput on your own.</description>
    </item>
    
    <item>
      <title>Java Collections Framework</title>
      <link>http://yangchao.me/post/java-collections-framework/</link>
      <pubDate>Fri, 26 Jun 2015 19:22:37 +0000</pubDate>
      
      <guid>http://yangchao.me/post/java-collections-framework/</guid>
      <description>(natural) ordered structure Red-Black Tree implementation to maintain the natural order (Comparable)
 TreeSet -&amp;gt; NavigableSet -&amp;gt; OrderedSet TreeMap -&amp;gt; NavigableMap -&amp;gt; OrderedMap  hash structure a bucket array, each bucket is a LinkedList; the index is computed by hashCode(), then traverse the LinkedList using equals() until finding the expected element.
 HashMap HashSet: backed by HashMap, just the element is the key of Entry&amp;amp;lt;K,V&amp;amp;gt; while the value is ignored.</description>
    </item>
    
    <item>
      <title>widen cast vs. narrow cast</title>
      <link>http://yangchao.me/post/widen-cast-vs-narrow-cast/</link>
      <pubDate>Mon, 23 Mar 2015 20:37:24 +0000</pubDate>
      
      <guid>http://yangchao.me/post/widen-cast-vs-narrow-cast/</guid>
      <description></description>
    </item>
    
    <item>
      <title>String class, text formatting</title>
      <link>http://yangchao.me/post/string-class-text-formatting/</link>
      <pubDate>Mon, 23 Mar 2015 20:28:12 +0000</pubDate>
      
      <guid>http://yangchao.me/post/string-class-text-formatting/</guid>
      <description>working with String class String is most frequently used class in Java.
immutable and flyweight design String is immutable
String is designed with the Flyweight design pattern. A pool of Strings is maintained by the String class.
pool of Strings and intern() You can always get the string in the pool by invoking intern().
For any two Strings s1 &amp;amp; s2, _s1.intern( ) _== _s2.intern( ) _only if _s1.equals(s2) _is true.</description>
    </item>
    
    <item>
      <title>cloning objects</title>
      <link>http://yangchao.me/post/cloning-objects/</link>
      <pubDate>Mon, 23 Mar 2015 20:26:14 +0000</pubDate>
      
      <guid>http://yangchao.me/post/cloning-objects/</guid>
      <description>Java has built-in support for shadow copy by Object.clone() and Cloneable interface.
shadow copy This is default implementation in java.
Object class has a method named clone(), but if we&amp;rsquo;d like to succeed with this built-in cloning capability, we need to use Cloneable marker interface.
The method performs a specific cloning operation. If the class of this object does not implement the interface, then a CloneNotSupportedException is thrown.
Note that all arrays are considered to implement the interface Cloneable.</description>
    </item>
    
    <item>
      <title>java modifiers revisit</title>
      <link>http://yangchao.me/post/java-modifiers-revist/</link>
      <pubDate>Mon, 23 Mar 2015 12:31:07 +0000</pubDate>
      
      <guid>http://yangchao.me/post/java-modifiers-revist/</guid>
      <description>acess control modifiers In Java, there are four different types of access modifiers for fields and methods:
 public: every class can access the element protected: only subclasses and classes in the same package can access the element default: only classes in the same package can access the element private: only this class can access the element  what does accessing mean? Accessing means you can refer. As in java only class can be the top-level element, thus top-level class access just use its name without a prefix.</description>
    </item>
    
    <item>
      <title>finalize()</title>
      <link>http://yangchao.me/post/finalize/</link>
      <pubDate>Fri, 20 Mar 2015 15:29:39 +0000</pubDate>
      
      <guid>http://yangchao.me/post/finalize/</guid>
      <description>finalize() method is a protected method of Object class. It&amp;rsquo;s intended to be invoked by GC thread before GC reclaim the memory allocated to the object.
Misguidingly it&amp;rsquo;s regarded as a place for doing some cleaning works, like releasing resources.
But this is NOT recommended!!
As we cannot know when GC do the thing, so we do some cleaning work becomes not guaranteed at all and uncertain.
Other drawbacks:
1) exceptions thrown in the finalize() method will be ignored by the GC thread and will not be propagated further.</description>
    </item>
    
    <item>
      <title>Immutable objects</title>
      <link>http://yangchao.me/post/immutable-objects/</link>
      <pubDate>Thu, 19 Mar 2015 16:54:45 +0000</pubDate>
      
      <guid>http://yangchao.me/post/immutable-objects/</guid>
      <description>An immutable class is one whose state can not be changed once created. There are certain guidelines to create an class immutable. In this post, we will revisit these guidelines.
Benefits of making a class immutable Lets first identify benefits of making a class immutable. Immutable classes are
 are simple to construct, test, and use are automatically thread-safe and have no synchronization issues do not need a copy constructor do not need an implementation of clone allow hashCode to use lazy initialization, and to cache its return value do not need to be copied defensively when used as a field make good Map keys and Set elements (these objects must not change state while in the collection) have their class invariant established once upon construction, and it never needs to be checked again always have “failure atomicity” (a term used by Joshua Bloch) : if an immutable object throws an exception, it’s never left in an undesirable or indeterminate state  Guidelines to make a class immutable Java documentation itself has some guidelines identified in this link.</description>
    </item>
    
    <item>
      <title>String#substring(..) implementation</title>
      <link>http://yangchao.me/post/stringsubstring-implementation/</link>
      <pubDate>Thu, 19 Mar 2015 15:22:01 +0000</pubDate>
      
      <guid>http://yangchao.me/post/stringsubstring-implementation/</guid>
      <description>I heard that in new version of JDK (&amp;gt;JDK7u5), substring implementation is changed.
In the past, substring() don&amp;rsquo;t copy the specified character string but share the inherent character array reference with the original String. In this case, String substring can result in retaining more memory than you might expect. As such it&amp;rsquo;s not a memory leak as this memory can be recovered normally (potential memory leak).
But note this behaviour has changed as of Java 7u6.</description>
    </item>
    
    <item>
      <title>Why two Date classes: java.util.Date and java.sql.Date?</title>
      <link>http://yangchao.me/post/why-two-date-classes-java-util-date-and-java-sql-date/</link>
      <pubDate>Thu, 19 Mar 2015 14:35:54 +0000</pubDate>
      
      <guid>http://yangchao.me/post/why-two-date-classes-java-util-date-and-java-sql-date/</guid>
      <description>A java.util.Date represents date and time of day, a java.sql.Date only represents a date. The complement of java.sql.Date is java.sql.Time, which only represents a time of day. The java.sql.Date is a subclass (an extension) of java.util.Date. So, what changed in java.sql.Date:
&amp;ndash; toString() generates a different string representation: yyyy-mm-dd &amp;ndash; a static valueOf(String) methods to create a Date from a String with above representation &amp;ndash; the getters and setter for hours, minutes and seconds are deprecated</description>
    </item>
    
    <item>
      <title>auto-boxing and valueOf(..)</title>
      <link>http://yangchao.me/post/autoboxing-and-valueof/</link>
      <pubDate>Tue, 17 Mar 2015 19:20:41 +0000</pubDate>
      
      <guid>http://yangchao.me/post/autoboxing-and-valueof/</guid>
      <description>Autoboxing uses Integer.valueOf(int),which internally caches Integer objects for small integers (by default -128 to 127, but the max value can be configured with the &amp;ldquo;java.lang.Integer.IntegerCache.high&amp;rdquo; property.
Double is the same by using Double.valueOf(..)
So the following two lines are equivalent.
Integer i = 12; Integer i = Integer.valueOf(12);  If you don&amp;rsquo;t believe it, you can decompile the .class file to see what the compiler does.</description>
    </item>
    
    <item>
      <title>Float numbers</title>
      <link>http://yangchao.me/post/float-numbers/</link>
      <pubDate>Tue, 17 Mar 2015 14:38:15 +0000</pubDate>
      
      <guid>http://yangchao.me/post/float-numbers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>equals() / hashCode() contract, Comparable contract</title>
      <link>http://yangchao.me/post/equals-and-hashcode-contract/</link>
      <pubDate>Mon, 16 Mar 2015 19:13:32 +0000</pubDate>
      
      <guid>http://yangchao.me/post/equals-and-hashcode-contract/</guid>
      <description>Although Java encourage and support to maintain contract by interface, but there are some implicit contracts that should be noticed when you are implementing some special functions.
What is equals and hashCode contract?  The interface contract for Object requires that if two objects are equal according to equals(), then they must have the same hashCode()value.
1. If two objects are equal, then they must have the same hash code.</description>
    </item>
    
    <item>
      <title>Character encoding and charset in Java</title>
      <link>http://yangchao.me/post/character-encoding-and-charset-in-java/</link>
      <pubDate>Mon, 16 Mar 2015 19:08:24 +0000</pubDate>
      
      <guid>http://yangchao.me/post/character-encoding-and-charset-in-java/</guid>
      <description>Concepts At the beginning, we need to distinguish some key concepts.
character Character (aka. abstract character) is a textual representation of character.
glyph glyph is the particular images representing a character or part of a character. Glyphs for the same character may have very different shapes
abstract character repertoire (ACR) A character repertoire is the full set of unordered abstract characters that a system supports.
coded character set (CCS) A coded character set (CCS) specifies how to represent a repertoire of characters using a number of (typically non-negative) integer values called code points.</description>
    </item>
    
    <item>
      <title>finally execution in try-catch-finnally blocks</title>
      <link>http://yangchao.me/post/finally-execution-in-try-catch-finnally-blocks/</link>
      <pubDate>Mon, 16 Mar 2015 19:02:01 +0000</pubDate>
      
      <guid>http://yangchao.me/post/finally-execution-in-try-catch-finnally-blocks/</guid>
      <description>The finally block will always execute, except for System.exit() is called first, or the thread has terminated or the JVM crashes. Anything that is returned in the finally block will actually override any exception or returned value that is inside the try/catch block.
public class Finally { //exception-free code, try-catch-finally blocks all have returns private int scenario1() { int i = 0; try { System.out.println(&amp;amp;quot;Inside try block of testMethod!&amp;amp;quot;); i = 100; return i; } catch(Exception e){ System.</description>
    </item>
    
    <item>
      <title>output - pre-increment and post-increment</title>
      <link>http://yangchao.me/post/output-pre-increment-and-post-increment/</link>
      <pubDate>Mon, 02 Feb 2015 09:05:24 +0000</pubDate>
      
      <guid>http://yangchao.me/post/output-pre-increment-and-post-increment/</guid>
      <description>public static void main(String [] args) { int x= 0; int y= 0; for (int z = 0; z &amp;amp;lt; 5; z++) { if (( x++ &amp;amp;gt; 2 ) || (y++ &amp;amp;gt; 2)) { x++; } } System.out.println(x + &amp;amp;quot; &amp;amp;quot; + y); }  Output is: 7 3
public static void main(String [] args) { int x= 0; int y= 0; for (int z = 0; z &amp;amp;lt; 5; z++) { if (( ++x &amp;gt; 2 ) || (++y &amp;gt; 2)) { x++; } } System.</description>
    </item>
    
    <item>
      <title>Assertion</title>
      <link>http://yangchao.me/post/assertion/</link>
      <pubDate>Fri, 16 Jan 2015 01:28:54 +0000</pubDate>
      
      <guid>http://yangchao.me/post/assertion/</guid>
      <description>Java have an &amp;ldquo;assert&amp;rdquo; keyword since java 1.4
Usage There are two kinds of syntax:
1) assert expression1
2) assert expression1 : expression2
expression1 must be evaluated as boolean ( true or false) while expression2 can be primitive, object, or array.
expression2 is passed into the constructor of AssertionError as an argument.

So if expression2 is evaluated as void, it&amp;rsquo;s not allowed.
void foo() {} assert true : foo(); // cannot be compiled  How to enable or disable assertion Assert statements will be evaluated only if assertion is enabled.</description>
    </item>
    
    <item>
      <title>Inner Classes</title>
      <link>http://yangchao.me/post/inner-classes/</link>
      <pubDate>Wed, 14 Jan 2015 10:53:54 +0000</pubDate>
      
      <guid>http://yangchao.me/post/inner-classes/</guid>
      <description>There are 4 kinds of inner classes: Member classes (non-static inner classes) Local classes Anonymous classes Nested top-level classes and interfaces (static inner classes) The former three kinds are called inner classes. The last kind is called nested class. &amp;nbsp; Member interface is implicitly static, so it&amp;rsquo;s never considered as inner class. Member classes What is a member class? A member class is a class that is defined inside the</description>
    </item>
    
    <item>
      <title>Enumeration types</title>
      <link>http://yangchao.me/post/enumeration-types/</link>
      <pubDate>Sat, 12 Jan 2013 02:58:13 +0000</pubDate>
      
      <guid>http://yangchao.me/post/enumeration-types/</guid>
      <description>enum&amp;rsquo;s underlying implementation Define enumerated types by using enum keyword.
enum MetaColor { RED, YELLOW, BLUE }  Now, MetaColor class has three final static members all of which are of MetaColor class: RED, YELLOW and BLUE
MetaColor has 2 static methods: values(), valueOf(..) and other instance methods: name(), ordinal() and toString(), hashCode(), equals().
You can override the toString(), but hashCode() and equals() are final which cannot be override. Actually, enum maintains a singleton for ever enum object, so overriding hashCode() and equals() is not required.</description>
    </item>
    
    <item>
      <title>variable argument list: a pitfall</title>
      <link>http://yangchao.me/post/variable-argument-list-a-pitfall/</link>
      <pubDate>Sat, 12 Jan 2013 02:56:36 +0000</pubDate>
      
      <guid>http://yangchao.me/post/variable-argument-list-a-pitfall/</guid>
      <description>We usually define a method with a variable argument list like this:
void bar(String...args) { //blablab }  But there is a pitfall in this place. Can you ensure args is always an array, even its length is 0 when it&amp;rsquo;s empty?
Yes, most of time.
obj.bar(); // here, args is a zero-length array  BUT, things are not always like that.
You can see this:
obj.bar(null);  Guess what? Here the args is also null.</description>
    </item>
    
    <item>
      <title>Java access control</title>
      <link>http://yangchao.me/post/java-access-control/</link>
      <pubDate>Sat, 12 Jan 2013 02:28:45 +0000</pubDate>
      
      <guid>http://yangchao.me/post/java-access-control/</guid>
      <description>Java access control is a bit weird, especially for the ones with C++ background.
There are two types of access control, one for classes and the other for members. To simplify my discussion, in this context the class mean the top level one, which is directly defined in a compile unit. As the nested class is actually always associated with another class, so it&amp;rsquo;s not top level class and I regard it as just a member like member variables and member methods.</description>
    </item>
    
  </channel>
</rss>